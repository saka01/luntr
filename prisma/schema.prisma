// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  createdAt     DateTime @map("created_at") @default(now())
  profile       Profile?
  progress      UserProgress[]
  attempts      Attempt[]
  studySessions StudySession[]
}

model Profile {
  userId          String  @id @map("user_id")
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  level           Level
  dailyMinutes    Int     @map("daily_minutes")
  streak          Int     @default(0)
  lastActive      DateTime? @map("last_active")
  primaryLanguage String? @map("primary_language")
  learningGoal    String? @map("learning_goal")
  timezone        String?
}

enum Level {
  Beginner
  Intermediate
  Advanced
}

model Card {
  id         String     @id @default(cuid())
  slug       String     @unique
  pattern    String
  type       CardType
  difficulty Difficulty  @default(M)
  prompt     Json
  answer     Json
  hints      String?
  createdAt  DateTime?  @map("created_at") @default(now())
  subtype    String?        // "recognition" | "edge" | "complexity" | "impl"
  tags       String?        // JSON string
  estSeconds Int?           @map("est_seconds")
  progress   UserProgress[]
  attempts   Attempt[]

  @@index([pattern, type])
}

enum CardType {
  mcq
  plan
  order
  fitb
  insight
}

enum Difficulty {
  E
  M
  H
}

model UserProgress {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  cardId       String   @map("card_id")
  ef           Float    @default(2.5)
  reps         Int      @default(0)
  intervalDays Int      @map("interval_days") @default(0)
  nextDue      DateTime @map("next_due") @default(now())
  lastGrade    Int?     @map("last_grade")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  card         Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@unique([userId, cardId])
  @@index([userId, nextDue])
}

model Attempt {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  cardId    String   @map("card_id")
  grade     Int                    // 1 | 3 | 5
  feedback  Json
  createdAt DateTime @map("created_at") @default(now())

  timeMs    Int       @map("time_ms") @default(0)
  timedOut  Boolean   @map("timed_out") @default(false)

  choice    Int?      // mcq
  order     Int[]     // order
  text      String?   // plan or concatenated fitb
  blanks    String[]  // fitb multi
  correct   Boolean?  // computed where applicable
  choiceIndexes Int[]  // NEW: for FITB option indexes

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  card      Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model StudySession {
  id              String   @id @default(cuid())
  userId          String
  pattern         String
  startedAt       DateTime @default(now())
  endedAt         DateTime?
  sizePlanned     Int      @default(10)
  sizeCompleted   Int      @default(0)
  servedCardIds   Json     // Array of card IDs served in this session
  accuracy        Float?   // Calculated accuracy percentage
  avgResponseMs   Float?   // Average response time in milliseconds
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startedAt])
}

