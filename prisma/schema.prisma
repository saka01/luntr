// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  createdAt     DateTime @default(now())
  profile       Profile?
  progress      UserProgress[]
  attempts      Attempt[]
}

model Profile {
  userId       String  @id
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  level        Level
  dailyMinutes Int
  streak       Int      @default(0)
  lastActive   DateTime?
}

enum Level {
  Beginner
  Intermediate
  Advanced
}

model Card {
  id         String     @id @default(cuid())
  slug       String     @unique
  pattern    String
  type       CardType
  difficulty Difficulty  @default(M)
  prompt     Json
  answer     Json
  hints      String?
  subtype    String?        // "recognition" | "edge" | "complexity" | "impl"
  tags       String?        // JSON string
  estSeconds Int?
  progress   UserProgress[]
  attempts   Attempt[]
}

enum CardType {
  mcq
  plan
  order
  fitb
  insight
}

enum Difficulty {
  E
  M
  H
}

model UserProgress {
  id           String   @id @default(cuid())
  userId       String
  cardId       String
  ef           Float    @default(2.5)
  reps         Int      @default(0)
  intervalDays Int      @default(0)
  nextDue      DateTime @default(now())
  lastGrade    Int?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  card         Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@unique([userId, cardId])
}

model Attempt {
  id        String   @id @default(cuid())
  userId    String
  cardId    String
  grade     Int                    // 1 | 3 | 5
  feedback  Json
  createdAt DateTime @default(now())

  timeMs    Int       @default(0)
  timedOut  Boolean   @default(false)

  choice    Int?      // mcq
  order     Int[]     // order
  text      String?   // plan or concatenated fitb
  blanks    String[]  // fitb multi
  correct   Boolean?  // computed where applicable

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  card      Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

