cards:
  # MCQ Cards (8 total)
  - slug: "sliding-window-max-sum"
    pattern: "Sliding Window"
    type: "mcq"
    difficulty: "E"
    prompt:
      stem: "Find the maximum sum of any contiguous subarray of size k."
      options:
        - "Sliding Window"
        - "Two Pointers"
        - "Prefix Sum"
    answer:
      correctIndex: 0
      rationale: "Sliding Window efficiently maintains a fixed-size window while tracking maximum sum."
    hints: null

  - slug: "sliding-window-longest-substring"
    pattern: "Sliding Window"
    type: "mcq"
    difficulty: "M"
    prompt:
      stem: "Find the length of the longest substring without repeating characters."
      options:
        - "Sliding Window"
        - "Hash Map"
        - "Binary Search"
    answer:
      correctIndex: 0
      rationale: "Sliding Window expands/contracts to maintain unique characters efficiently."
    hints: null

  - slug: "sliding-window-k-distinct"
    pattern: "Sliding Window"
    type: "mcq"
    difficulty: "M"
    prompt:
      stem: "Find the longest substring with at most k distinct characters."
      options:
        - "Sliding Window"
        - "Dynamic Programming"
        - "Greedy"
    answer:
      correctIndex: 0
      rationale: "Sliding Window tracks distinct characters while expanding/contracting window."
    hints: null

  - slug: "sliding-window-min-window"
    pattern: "Sliding Window"
    type: "mcq"
    difficulty: "H"
    prompt:
      stem: "Find the minimum window substring containing all characters of another string."
      options:
        - "Sliding Window"
        - "Backtracking"
        - "Union Find"
    answer:
      correctIndex: 0
      rationale: "Sliding Window finds minimum valid window by expanding then contracting."
    hints: null

  - slug: "sliding-window-fixed-size"
    pattern: "Sliding Window"
    type: "mcq"
    difficulty: "E"
    prompt:
      stem: "Calculate the average of all contiguous subarrays of size k."
      options:
        - "Sliding Window"
        - "Brute Force"
        - "Divide and Conquer"
    answer:
      correctIndex: 0
      rationale: "Sliding Window efficiently slides fixed-size window to calculate averages."
    hints: null

  - slug: "sliding-window-character-replacement"
    pattern: "Sliding Window"
    type: "mcq"
    difficulty: "M"
    prompt:
      stem: "Find the longest substring after replacing at most k characters with any other character."
      options:
        - "Sliding Window"
        - "Two Pointers"
        - "Stack"
    answer:
      correctIndex: 0
      rationale: "Sliding Window maintains valid window while tracking character frequencies."
    hints: null

  - slug: "sliding-window-fruit-basket"
    pattern: "Sliding Window"
    type: "mcq"
    difficulty: "M"
    prompt:
      stem: "Find the maximum number of fruits you can collect from trees with at most 2 different types."
      options:
        - "Sliding Window"
        - "Greedy"
        - "Priority Queue"
    answer:
      correctIndex: 0
      rationale: "Sliding Window maintains window with at most 2 distinct fruit types."
    hints: null

  - slug: "sliding-window-max-freq"
    pattern: "Sliding Window"
    type: "mcq"
    difficulty: "H"
    prompt:
      stem: "Find the maximum frequency of any element in a subarray of size k."
      options:
        - "Sliding Window"
        - "Hash Map"
        - "Sorting"
    answer:
      correctIndex: 0
      rationale: "Sliding Window efficiently tracks frequency changes as window slides."
    hints: null

  # Plan Cards (4 total)
  - slug: "sliding-window-plan-max-sum"
    pattern: "Sliding Window"
    type: "plan"
    difficulty: "E"
    prompt:
      stem: "Design an approach to find the maximum sum of any contiguous subarray of size k."
    answer:
      checklist: ["expand", "windowLen", "maxFreq"]
      rationale: "Use sliding window to maintain fixed-size window and track maximum sum."
    hints: null

  - slug: "sliding-window-plan-longest-substring"
    pattern: "Sliding Window"
    type: "plan"
    difficulty: "M"
    prompt:
      stem: "Plan how to find the longest substring without repeating characters."
    answer:
      checklist: ["shrink", "freq", "expand"]
      rationale: "Expand window until duplicate found, then shrink from left until valid."
    hints: null

  - slug: "sliding-window-plan-k-distinct"
    pattern: "Sliding Window"
    type: "plan"
    difficulty: "M"
    prompt:
      stem: "Design a solution to find the longest substring with at most k distinct characters."
    answer:
      checklist: ["shrink", "freq", "maxFreq", "while condition"]
      rationale: "Expand window while distinct count â‰¤ k, shrink when count exceeds k."
    hints: null

  - slug: "sliding-window-plan-min-window"
    pattern: "Sliding Window"
    type: "plan"
    difficulty: "H"
    prompt:
      stem: "Plan how to find the minimum window substring containing all characters of target string."
    answer:
      checklist: ["shrink", "freq", "expand", "while condition"]
      rationale: "Expand until all characters found, then shrink to find minimum valid window."
    hints: null